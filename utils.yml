# This file contains small scripts, rules or other templates
# which can be referenced by other templates in this repo (or other repos as well).
# Include the scripts using the `!reference` tag.

variables:
  EXTRA_REQUIREMENTS_PIP: ""
  INSTALL_REQUIREMENTS_TXT: "true"
  USE_UV: "true"

.github_ssh_auth:
  script:
    - apt-get update -y
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
    - echo "${GITHUB_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - git config --global user.email "${GITLAB_USER_NAME}"
    - git config --global user.name "${GITLAB_USER_EMAIL}"

.gitlab_ssh_auth:
  script:
    - 'which ssh-agent || ( apt-get update -qy && apt-get install openssh-client -qqy )'
    - eval `ssh-agent -s`
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null # add ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PUBLIC_KEY" >> ~/.ssh/id_rsa.pub
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - git config --global user.email "${GITLAB_USER_NAME}"
    - git config --global user.name "${GITLAB_USER_EMAIL}"


.install_local_repository:
  # This script installs all listed requirements in a repo
  # and the repo itself, if a setup.py is present.
  script:
    - pip install --upgrade pip
    - |
      if [[ "$USE_UV" == "true" ]]; then
        echo "Installing and setting up uv"
        pip install uv
        INSTALL_CMD="uv pip install --system"
      else
        echo "Using standard pip"
        INSTALL_CMD="pip install"
      fi
    - echo "Installation command is '$INSTALL_CMD'"
    - if [[ "$INSTALL_REQUIREMENTS_TXT" == "true" ]] && test -e requirements.txt; then $INSTALL_CMD -r requirements.txt; else echo "no requirements to install"; fi
    - if test -e setup.py || test -e pyproject.toml; then $INSTALL_CMD -e .$EXTRA_REQUIREMENTS_PIP; else echo "no setup.py found"; fi

.python_version_rule:
  rules:
    - if: '$PYTHON_VERSION == "python:3.7" || $PYTHON_VERSION == "python:3.8" || 
           $PYTHON_VERSION == "python:3.9" || $PYTHON_VERSION == "python:3.10" || 
           $PYTHON_VERSION == "python:3.11"'

.check_correct_python_version:
  # This template checks if the image being used has python installed
  # and if the version is at least 3.6
  script:
    - TODO

.github_app_auth:
  script:
    - apt-get update -y
    - apt-get install jq -y
    - pip install jwt
    - echo "$GH_APP_PRIVATE_KEY" > temp_key.pem
    - GITHUB_APP_JWT=`python -c "import sys, time, jwt;app_id=382558;file = open('temp_key.pem', 'rb');pem = file.read();file.close();signing_key = jwt.jwk_from_pem(pem);payload = dict(iat=int(time.time()), exp=int(time.time()) + 600, iss=app_id);encoded_jwt = jwt.JWT().encode(payload, signing_key, alg='RS256');print(encoded_jwt)"`
    - 'curl --request POST --url "https://api.github.com/app/installations/41219186/access_tokens" --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${GITHUB_APP_JWT}" --header "X-GitHub-Api-Version: 2022-11-28" -o curl_response.txt'
    - GH_TOKEN=$(cat curl_response.txt | jq -r ".token")
